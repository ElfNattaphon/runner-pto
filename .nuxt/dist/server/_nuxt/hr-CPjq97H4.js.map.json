{"file":"hr-CPjq97H4.js","mappings":"AAGO,SAAS,eAAe,MAAuH;AACpJ,QAAM,SAAU,KAAK,UAAU;AAC/B,MAAI,QAAQ,KAAK,SAAS;AAC1B,QAAM,IAAI,KAAK,eAAe;AAE9B,MAAI,WAAW,OAAO;AACpB,QAAI,CAAC,SAAS,KAAK,YAAY,KAAK,WAAW,GAAG;AAChD,cAAQ,MAAM,KAAK,MAAM,KAAK,QAAQ;AAAA,IACxC;AACA,QAAI,CAAC,MAAO,QAAO;AACnB,UAAM,IAAI;AACV,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAE,GAAI,GAAG,KAAK,MAAM,IAAE,GAAI,CAAC;AAClE,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAE,GAAI,GAAG,KAAK,MAAM,IAAE,GAAI,CAAC;AAClE,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAE,GAAI,GAAG,KAAK,MAAM,IAAE,GAAI,CAAC;AAClE,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAE,GAAI,GAAG,KAAK,MAAM,IAAE,GAAI,CAAC;AAClE,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAE,GAAI,GAAG,KAAK,MAAM,IAAE,CAAI,CAAC;AAClE,WAAO,EAAE,IAAG,IAAI,IAAG,IAAI,IAAG,IAAI,IAAG,IAAI,IAAG,GAAA;AAAA,EAC1C,OAAO;AACL,QAAI,CAAC,EAAG,QAAO;AACf,UAAM,KAAqB,CAAC,GAAG,KAAK,MAAM,IAAI,IAAI,CAAC;AACnD,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAI,IAAI,GAAG,KAAK,MAAM,IAAI,IAAI,CAAC;AACtE,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAI,GAAI,GAAG,KAAK,MAAM,IAAI,IAAI,CAAC;AACtE,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAI,IAAI,GAAG,KAAK,MAAM,IAAI,IAAI,CAAC;AACtE,UAAM,KAAqB,CAAC,KAAK,MAAM,IAAI,CAAI,GAAG,KAAK,MAAM,IAAI,IAAI,CAAC;AACtE,WAAO,EAAE,IAAG,IAAI,IAAG,IAAI,IAAG,IAAI,IAAG,IAAI,IAAG,GAAA;AAAA,EAC1C;AACF;AAEO,SAAS,oBAAoB,SAAiB,MAAc,OAA+B;AAChG,QAAM,QAAQ,WAAW,IAAI,MAAM,OAAO,EAAE,CAAC;AAC7C,MAAI,CAAC,MAAO,QAAO;AACnB,QAAM,QAAQ,CAAC,MAAsC;AACnD,YAAQ,GAAA;AAAA,MACN,KAAK;AAAK,eAAO,MAAM;AAAA,MACvB,KAAK;AAAM,eAAO,MAAM;AAAA,MACxB,KAAK;AAAK,eAAO,MAAM;AAAA,MACvB,KAAK;AAAK,eAAO,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;AAAA;AAAA,MAC1C,KAAK;AAAK,eAAO,MAAM;AAAA,MACvB,KAAK;AAAK,eAAO,MAAM;AAAA,MACvB;AAAS,eAAO;AAAA,IAAA;AAAA,EAEpB;AACA,QAAM,IAAI,MAAM,IAAI;AACpB,MAAI,CAAC,EAAG,QAAO;AACf,SAAO,GAAG,IAAI,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,SAAO,MAAM,YAAY,IAAI,cAAc,IAAI,CAAC,GAAG;AAChG;AAEO,SAAS,cAAc,GAAmB;AAC/C,UAAQ,GAAA;AAAA,IACN,KAAK;AAAK,aAAO;AAAA,IACjB,KAAK;AAAM,aAAO;AAAA,IAClB,KAAK;AAAK,aAAO;AAAA,IACjB,KAAK;AAAK,aAAO;AAAA,IACjB,KAAK;AAAK,aAAO;AAAA,IACjB,KAAK;AAAK,aAAO;AAAA,IACjB;AAAS,aAAO;AAAA,EAAA;AAEpB;","names":[],"sources":["../../../../utils/hr.ts"],"sourcesContent":["export type HrZones = { Z1:[number,number], Z2:[number,number], Z3:[number,number], Z4:[number,number], Z5:[number,number] }\nexport type HrBasis = 'max' | 'threshold'\n\nexport function computeHrZones(opts: { method?: HrBasis|null, maxHR?: number|null, thresholdHR?: number|null, ageYears?: number|null }): HrZones|null {\n  const method = (opts.method || 'max') as HrBasis\n  let maxHR = opts.maxHR || null\n  const t = opts.thresholdHR || null\n\n  if (method === 'max') {\n    if (!maxHR && opts.ageYears && opts.ageYears > 0) {\n      maxHR = 220 - Math.round(opts.ageYears)\n    }\n    if (!maxHR) return null\n    const m = maxHR\n    const z1:[number,number] = [Math.round(m*0.50), Math.round(m*0.60)]\n    const z2:[number,number] = [Math.round(m*0.60), Math.round(m*0.70)]\n    const z3:[number,number] = [Math.round(m*0.70), Math.round(m*0.80)]\n    const z4:[number,number] = [Math.round(m*0.80), Math.round(m*0.90)]\n    const z5:[number,number] = [Math.round(m*0.90), Math.round(m*1.00)]\n    return { Z1:z1, Z2:z2, Z3:z3, Z4:z4, Z5:z5 }\n  } else {\n    if (!t) return null\n    const z1:[number,number] = [0, Math.round(t * 0.85)]\n    const z2:[number,number] = [Math.round(t * 0.85), Math.round(t * 0.89)]\n    const z3:[number,number] = [Math.round(t * 0.90), Math.round(t * 0.94)]\n    const z4:[number,number] = [Math.round(t * 0.95), Math.round(t * 0.99)]\n    const z5:[number,number] = [Math.round(t * 1.00), Math.round(t * 1.05)]\n    return { Z1:z1, Z2:z2, Z3:z3, Z4:z4, Z5:z5 }\n  }\n}\n\nexport function renderDetailsWithHR(details: string, type: string, zones: HrZones | null): string {\n  const base = (details || '').split(' — HR')[0]\n  if (!zones) return base\n  const range = (t: string): [number,number] | null => {\n    switch (t) {\n      case 'E': return zones.Z2\n      case 'LR': return zones.Z2\n      case 'M': return zones.Z3\n      case 'T': return [zones.Z3[0], zones.Z4[1]] // Z3–Z4 span\n      case 'I': return zones.Z4\n      case 'R': return zones.Z5\n      default: return null\n    }\n  }\n  const r = range(type)\n  if (!r) return base\n  return `${base} — HR ${r[0]}–${r[1]} bpm ${type==='T' ? '(Z3–Z4)' : `(${mapTypeToZone(type)})`}`\n}\n\nexport function mapTypeToZone(t: string): string {\n  switch (t) {\n    case 'E': return 'Z2'\n    case 'LR': return 'Z2'\n    case 'M': return 'Z3'\n    case 'T': return 'Z3–Z4'\n    case 'I': return 'Z4'\n    case 'R': return 'Z5'\n    default: return '—'\n  }\n}\n"],"version":3}