{"file":"TimeHMSInput-DArq7jMJ.js","mappings":";;;;;;;;;;AAaA,UAAM,QAAQ;AAED,QAA2B,IAAI;AAC/B,QAA2B,IAAI;AAC/B,QAA2B,IAAI;AAC5C,UAAM,IAAI,SAAS,MAAM,KAAK,OAAO,MAAM,cAAc,KAAK,IAAI,CAAC;AACnE,UAAM,IAAI,SAAS,MAAM,KAAK,OAAQ,MAAM,cAAc,KAAK,OAAQ,EAAE,CAAC;AAC1E,UAAM,IAAI,SAAS,MAAM,KAAK,OAAO,MAAM,cAAc,KAAK,EAAE,CAAC;;mBAnB1DA,eAAAC,WAAA,EAAA,OAAM,6BAAyB,MAAA,CAAA,0GAE/BC,cAAA,SAAOC,MAAA,CAAA,CAAC,iIAGRD,cAAA,SAAOC,MAAA,CAAA,CAAC,iIAGRD,cAAA,SAAOC,MAAA,CAAA,CAAC;;;;;;;;;;","names":["_ssrRenderAttrs","_mergeProps","_ssrRenderAttr","_unref"],"sources":["../../../../components/TimeHMSInput.vue"],"sourcesContent":["<template>\n  <div class=\"flex items-center gap-2\">\n    <input ref=\"hRef\" type=\"number\" inputmode=\"numeric\" min=\"0\" placeholder=\"hh\" class=\"form-input w-20 text-center\"\n      :value=\"h\" @input=\"onNum('h', $event)\" @keydown=\"onKey('h', $event)\" />\n    <span>:</span>\n    <input ref=\"mRef\" type=\"number\" inputmode=\"numeric\" min=\"0\" max=\"59\" placeholder=\"mm\" class=\"form-input w-16 text-center\"\n      :value=\"m\" @input=\"onNum('m', $event)\" @keydown=\"onKey('m', $event)\" />\n    <span>:</span>\n    <input ref=\"sRef\" type=\"number\" inputmode=\"numeric\" min=\"0\" max=\"59\" placeholder=\"ss\" class=\"form-input w-16 text-center\"\n      :value=\"s\" @input=\"onNum('s', $event)\" @keydown=\"onKey('s', $event)\" />\n  </div>\n</template>\n<script setup lang=\"ts\">\nconst props = withDefaults(defineProps<{ modelValue?: number | null }>(), { modelValue: null })\nconst emit = defineEmits(['update:modelValue'])\nconst hRef = ref<HTMLInputElement|null>(null)\nconst mRef = ref<HTMLInputElement|null>(null)\nconst sRef = ref<HTMLInputElement|null>(null)\nconst h = computed(() => Math.floor((props.modelValue ?? 0) / 3600))\nconst m = computed(() => Math.floor(((props.modelValue ?? 0) % 3600) / 60))\nconst s = computed(() => Math.floor((props.modelValue ?? 0) % 60))\nfunction clamp(n: number, min: number, max: number) { return Math.min(max, Math.max(min, n)) }\nfunction toSecs(hh: number, mm: number, ss: number) {\n  const H = clamp(hh, 0, 99999), M = clamp(mm, 0, 59), S = clamp(ss, 0, 59)\n  return H * 3600 + M * 60 + S\n}\nfunction onNum(field: 'h'|'m'|'s', e: Event) {\n  const val = Number((e.target as HTMLInputElement).value || 0)\n  const next = { h: h.value, m: m.value, s: s.value }; (next as any)[field] = val\n  emit('update:modelValue', toSecs(next.h, next.m, next.s))\n  const target = e.target as HTMLInputElement\n  if (field === 'm' && target.value.length >= 2) sRef.value?.focus()\n}\nfunction onKey(field: 'h'|'m'|'s', e: KeyboardEvent) {\n  if (e.key === 'Backspace' && (e.target as HTMLInputElement).selectionStart === 0) {\n    if (field === 'm') hRef.value?.focus(); if (field === 's') mRef.value?.focus()\n  }\n}\n</script>\n"],"version":3}